;; -*- mode: scheme; -*-
(let ((vertex positions-start)     ;; current vertex
      (pos (vector 0 0 0))         ;; current position (centre of profile)
      (last-pos (vector 0 0 0))    ;; last position
      (dir (vector 0 0 0))         ;; current direction we are heading in

      (tx-a (vector 1 0 0))        ;; working rotation matrix row 1
      (tx-b (vector 0 1 0))        ;; row 2
      (tx-c (vector 0 0 1))        ;; row 3
      (cur-tx-a (vector 1 0 0))    ;; current rotation matrix row 1
      (cur-tx-b (vector 0 1 0))    ;; row 2
      (cur-tx-c (vector 0 0 1))    ;; row 3
      (last-tx-a (vector 1 0 0))   ;; last rotation matrix row 1
      (last-tx-b (vector 0 1 0))   ;; row 2
      (last-tx-c (vector 0 0 1))   ;; row 3

      (t 0)                        ;; slice counter
      (seq-size 14)                ;; number of sequence instructions
      (seq-pos 0)                  ;; current sequence position
      (seq-cur 0)                  ;; current instruction

      (segments 4)                 ;; profile segment count
      (seq-next 0)                 ;; next sequence instruction
      (seq-last 0)                 ;; last sequence instruction
      (profile-pos 0)              ;; current profile position
      (profile-scale 0.1)
      (profile-size 3)             ;; size of profile

      (profile-start (vector 0 0 1)) ;; profile data starts here
      (profile-b (vector 0 1 0))  ;; some space for extra follows
      (profile-c (vector 0 0 -1)) ;; (this default profile gets overwritten))
      (profile-d (vector 0 -1 0))
      (profile-loop (vector 0 0 1))
      (space-0 0)
      (space-1 0)
      (space-2 0)
      (space-3 0)
      (space-4 0)
      (space-5 0)
      (space-6 0)
      (space-7 0)
      (space-8 0)
      (space-9 0)
      (space-10 0)
      (space-12 0)
      )


  (trace (addr profile-scale))

  ;; set working matrix to identity
  (define init-mat
    (lambda ()
      (set! tx-a (vector 1 0 0))
      (set! tx-b (vector 0 1 0))
      (set! tx-c (vector 0 0 1))))

  ;; rotate working matrix in x by a
  (define rotate-mat-x
    (lambda (a)
      (set! tx-a (vector 1 0 0))
      (set! tx-b (*v (swizzle zyx (sincos a)) (vector 1 1 -1)))
      (set! tx-c (swizzle zxy (sincos a)))))

  ;; rotate working matrix in y by a
  (define rotate-mat-y
    (lambda (a)
      (set! tx-a (*v (swizzle yzx (sincos a)) (vector 1 1 -1)))
      (set! tx-b (vector 0 1 0))
      (set! tx-c (swizzle xzy (sincos a)))))

  ;; rotate working matrix in z by a
  (define rotate-mat-z
    (lambda (a)
      (set! tx-a (swizzle yxz (sincos a)))
      (set! tx-b (*v (sincos a) (vector -1 1 1)))
      (set! tx-c (vector 0 0 1))))

  ;; project vector by a matrix at supplied address
  (define tx-proj
    (lambda (tx-addr v)
      (+
       (+ (dot v (read tx-addr))
	  (swizzle yxy (dot v (read (+ tx-addr 1)))))
       (swizzle yyx (dot v (read (+ tx-addr 2)))))))

  (forever
   (set! vertex positions-start)
   (loop (< vertex positions-end)
	 ;; build a new segment
	 ;; read current, next and last sequence instructions
	 (set! seq-cur (read (+ seq-pos texture-start)))
	 (set! seq-next (read (+ (+ seq-pos 1) texture-start)))
	 (set! seq-last (read (+ (- seq-pos 1) texture-start)))
	 
	 ;; reset working matrix
	 (init-mat)

	 (cond
	  ((eq? seq-cur 0) ;; forward (pull 1)
	   ;; make a single segment by advancing pos to end
	   (set! pos (+ pos (* dir (- segments 1))))
	   ;; force skip to next segment
	   (set! t segments))

	  ((eq? seq-cur 1) ;; rotate 90 degrees left
	   (rotate-mat-y (/ 90 segments))
	   ;; tweak turning circle to fit segment
	   (set! pos (+ pos (* dir -0.2))))

	  ((eq? seq-cur 2) ;; rotate 90 degrees right
	   (rotate-mat-y (/ -90 segments))
	   (set! pos (+ pos (* dir -0.2))))


	  ((eq? seq-cur 3) ;; over
	   (when
	    ;; check next and last, either skip beginning or end
	    ;; so we join smoothly with the last segment
	    (and
	     (or (not (eq? seq-last 3)) (> t (/ segments 2)))
	     (or (not (eq? seq-next 3)) (< t (- (/ segments 2) 1))))

	    (set! pos (+ pos (* dir -0.25)))

	    (when (eq? t 0) (rotate-mat-z -45))
	    (when (eq? t 1)
		  ;; move a bit more up and down
		  (set! pos (+ pos (* dir 1)))
		  (rotate-mat-z 45))
	    (when (eq? t 2)
		  (rotate-mat-z 45))
	    (when (eq? t 3)
		  (set! pos (+ pos (* dir 1)))
		  (rotate-mat-z -45))))

	  ((eq? seq-cur 4) ;; under
	   (when
	    ;; check next and last, either skip beginning or end
	    ;; so we join smoothly with the last segment
	    (and
	     (or (not (eq? seq-last 4)) (> t (/ segments 2)))
	     (or (not (eq? seq-next 4)) (< t (- (/ segments 2) 1))))

	    (set! pos (+ pos (* dir -0.25)))

	    (when (eq? t 0) (rotate-mat-z 45))
	    (when (eq? t 1)
		  ;; move a bit more up and down
		  (set! pos (+ pos (* dir 2)))
		  (rotate-mat-z -45))
	    (when (eq? t 2)
		  (rotate-mat-z -45))
	    (when (eq? t 3)
		  (set! pos (+ pos (* dir 2)))
		  (rotate-mat-z 45))))	      
	  
	  ((eq? seq-cur 5) ;; twist
	   (rotate-mat-x (/ -90 segments))) 	      
	  )
	 
	 ;; apply working matrix to the to current one
	 (*m (addr tx-a) (addr cur-tx-a) (addr cur-tx-a))

	 ;; smooth by moving a bit here...
	 (set! pos (+ pos (* dir 0.5)))
	 ;; update direction with current rotation matrix
	 (set! dir (tx-proj (addr cur-tx-a) (vector 1 0 0)))
	 ;; and the rest post update here...
	 (set! pos (+ pos (* dir 0.5)))


	 ;; setup for constructing a new profile
	 (set! profile-pos (addr profile-start))
	 (loop (< profile-pos (+ (addr profile-start) profile-size))
	       ;; stitch with last rotation matrix and position
	       (write! vertex
		       (+ pos (tx-proj (addr cur-tx-a) (* (read (+ profile-pos 1)) profile-scale)))
		       (+ pos (tx-proj (addr cur-tx-a) (* (read profile-pos) profile-scale)))
		       (+ last-pos (tx-proj (addr last-tx-a) (* (read profile-pos) profile-scale)))

		       (+ last-pos (tx-proj (addr last-tx-a) (* (read profile-pos) profile-scale)))
		       (+ last-pos (tx-proj (addr last-tx-a) (* (read (+ profile-pos 1)) profile-scale)))
		       (+ pos (tx-proj (addr cur-tx-a) (* (read (+ profile-pos 1)) profile-scale))))
	       ;; transform and apply the normals
	       (write! (+ vertex prim-size)
		       (* (tx-proj (addr cur-tx-a) (read (+ profile-pos 1))) -1)
		       (* (tx-proj (addr cur-tx-a) (read profile-pos)) -1)
		       (* (tx-proj (addr last-tx-a) (read profile-pos)) -1)

		       (* (tx-proj (addr last-tx-a) (read profile-pos)) -1)
		       (* (tx-proj (addr last-tx-a) (read (+ profile-pos 1))) -1)
		       (* (tx-proj (addr cur-tx-a) (read (+ profile-pos 1))) -1))
	       
	       ;; (write! (+ vertex prim-size)
	       ;;         (tx-proj (addr cur-tx-a) (read profile-normal-pos))
	       ;;         (tx-proj (addr cur-tx-a) (read profile-normal-pos))
	       ;;         (tx-proj (addr last-tx-a) (read profile-normal-pos))

	       ;;         (tx-proj (addr last-tx-a) (read profile-normal-pos))
	       ;;         (tx-proj (addr last-tx-a) (read profile-normal-pos))
	       ;;         (tx-proj (addr cur-tx-a) (read profile-normal-pos)))


	       ;; increment the vertex
	       (set! vertex (+ vertex 6))
	       ;; increment profile vertex
	       (set! profile-pos (+ profile-pos 1))
	       ;;(set! profile-normal-pos (+ profile-normal-pos 1))
	       )


	 (set! t (+ t 1))
	 ;; have we finished this section yet?
	 (when (> t segments)
	       (set! t 0)
	       ;; sort out fixed point rounding errors
	       ;; by snapping the matrix to 90 degrees
	       (set! cur-tx-a (round cur-tx-a))
	       (set! cur-tx-b (round cur-tx-b))
	       (set! cur-tx-c (round cur-tx-c))
	       (set! seq-pos (+ seq-pos 1)))

	 ;; finished, so loop forever
	 (when (> seq-pos seq-size)
	       (set! seq-pos 0)
	       (forever))

	 ;; record the current pos and rotation
	 (set! last-pos pos)
	 (set! last-tx-a cur-tx-a)
	 (set! last-tx-b cur-tx-b)
	 (set! last-tx-c cur-tx-c)
	 )))
